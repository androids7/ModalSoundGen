// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/protobuf/sploosh.proto

#include "src/protobuf/sploosh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sploosh {
class Vector3dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3d>
      _instance;
} _Vector3d_default_instance_;
class ComplexdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Complexd>
      _instance;
} _Complexd_default_instance_;
class FMMomentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FMMoments>
      _instance;
} _FMMoments_default_instance_;
class ModalMomentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModalMoments>
      _instance;
} _ModalMoments_default_instance_;
}  // namespace sploosh
namespace protobuf_src_2fprotobuf_2fsploosh_2eproto {
void InitDefaultsVector3dImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sploosh::_Vector3d_default_instance_;
    new (ptr) ::sploosh::Vector3d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sploosh::Vector3d::InitAsDefaultInstance();
}

void InitDefaultsVector3d() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3dImpl);
}

void InitDefaultsComplexdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sploosh::_Complexd_default_instance_;
    new (ptr) ::sploosh::Complexd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sploosh::Complexd::InitAsDefaultInstance();
}

void InitDefaultsComplexd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsComplexdImpl);
}

void InitDefaultsFMMomentsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsVector3d();
  {
    void* ptr = &::sploosh::_FMMoments_default_instance_;
    new (ptr) ::sploosh::FMMoments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sploosh::FMMoments::InitAsDefaultInstance();
}

void InitDefaultsFMMoments() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFMMomentsImpl);
}

void InitDefaultsModalMomentsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsFMMoments();
  {
    void* ptr = &::sploosh::_ModalMoments_default_instance_;
    new (ptr) ::sploosh::ModalMoments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sploosh::ModalMoments::InitAsDefaultInstance();
}

void InitDefaultsModalMoments() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModalMomentsImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Vector3d, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Vector3d, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Vector3d, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Vector3d, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Complexd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Complexd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Complexd, real_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::Complexd, imag_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::FMMoments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::FMMoments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::FMMoments, numexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::FMMoments, wavenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::FMMoments, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::FMMoments, mfile_),
  3,
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::ModalMoments, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::ModalMoments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sploosh::ModalMoments, moment_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sploosh::Vector3d)},
  { 11, 18, sizeof(::sploosh::Complexd)},
  { 20, 29, sizeof(::sploosh::FMMoments)},
  { 33, 39, sizeof(::sploosh::ModalMoments)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sploosh::_Vector3d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sploosh::_Complexd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sploosh::_FMMoments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sploosh::_ModalMoments_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "src/protobuf/sploosh.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032src/protobuf/sploosh.proto\022\007sploosh\"4\n"
      "\010Vector3d\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n"
      "\001z\030\003 \001(\001:\0010\",\n\010Complexd\022\017\n\004real\030\001 \001(\001:\0010"
      "\022\017\n\004imag\030\002 \001(\001:\0010\"^\n\tFMMoments\022\016\n\006numExp"
      "\030\001 \002(\r\022\017\n\007waveNum\030\002 \002(\001\022!\n\006center\030\003 \001(\0132"
      "\021.sploosh.Vector3d\022\r\n\005mfile\030\004 \001(\t\"2\n\014Mod"
      "alMoments\022\"\n\006moment\030\001 \003(\0132\022.sploosh.FMMo"
      "ments"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/protobuf/sploosh.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_src_2fprotobuf_2fsploosh_2eproto
namespace sploosh {

// ===================================================================

void Vector3d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsVector3d();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sploosh.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sploosh.Vector3d)
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:sploosh.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3d& Vector3d::default_instance() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsVector3d();
  return *internal_default_instance();
}

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:sploosh.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sploosh.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sploosh.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sploosh.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sploosh.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sploosh.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sploosh.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sploosh.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sploosh.Vector3d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sploosh.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sploosh.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sploosh.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sploosh.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sploosh.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sploosh.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Complexd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Complexd::kRealFieldNumber;
const int Complexd::kImagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Complexd::Complexd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsComplexd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sploosh.Complexd)
}
Complexd::Complexd(const Complexd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&real_, &from.real_,
    static_cast<size_t>(reinterpret_cast<char*>(&imag_) -
    reinterpret_cast<char*>(&real_)) + sizeof(imag_));
  // @@protoc_insertion_point(copy_constructor:sploosh.Complexd)
}

void Complexd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&real_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imag_) -
      reinterpret_cast<char*>(&real_)) + sizeof(imag_));
}

Complexd::~Complexd() {
  // @@protoc_insertion_point(destructor:sploosh.Complexd)
  SharedDtor();
}

void Complexd::SharedDtor() {
}

void Complexd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Complexd::descriptor() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Complexd& Complexd::default_instance() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsComplexd();
  return *internal_default_instance();
}

Complexd* Complexd::New(::google::protobuf::Arena* arena) const {
  Complexd* n = new Complexd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Complexd::Clear() {
// @@protoc_insertion_point(message_clear_start:sploosh.Complexd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&real_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imag_) -
        reinterpret_cast<char*>(&real_)) + sizeof(imag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Complexd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sploosh.Complexd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double real = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_real();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double imag = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_imag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sploosh.Complexd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sploosh.Complexd)
  return false;
#undef DO_
}

void Complexd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sploosh.Complexd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double real = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->real(), output);
  }

  // optional double imag = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->imag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sploosh.Complexd)
}

::google::protobuf::uint8* Complexd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sploosh.Complexd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double real = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->real(), target);
  }

  // optional double imag = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->imag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sploosh.Complexd)
  return target;
}

size_t Complexd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sploosh.Complexd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double real = 1 [default = 0];
    if (has_real()) {
      total_size += 1 + 8;
    }

    // optional double imag = 2 [default = 0];
    if (has_imag()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Complexd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sploosh.Complexd)
  GOOGLE_DCHECK_NE(&from, this);
  const Complexd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Complexd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sploosh.Complexd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sploosh.Complexd)
    MergeFrom(*source);
  }
}

void Complexd::MergeFrom(const Complexd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sploosh.Complexd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      real_ = from.real_;
    }
    if (cached_has_bits & 0x00000002u) {
      imag_ = from.imag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Complexd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sploosh.Complexd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Complexd::CopyFrom(const Complexd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sploosh.Complexd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Complexd::IsInitialized() const {
  return true;
}

void Complexd::Swap(Complexd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Complexd::InternalSwap(Complexd* other) {
  using std::swap;
  swap(real_, other->real_);
  swap(imag_, other->imag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Complexd::GetMetadata() const {
  protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FMMoments::InitAsDefaultInstance() {
  ::sploosh::_FMMoments_default_instance_._instance.get_mutable()->center_ = const_cast< ::sploosh::Vector3d*>(
      ::sploosh::Vector3d::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FMMoments::kNumExpFieldNumber;
const int FMMoments::kWaveNumFieldNumber;
const int FMMoments::kCenterFieldNumber;
const int FMMoments::kMfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FMMoments::FMMoments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsFMMoments();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sploosh.FMMoments)
}
FMMoments::FMMoments(const FMMoments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mfile()) {
    mfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mfile_);
  }
  if (from.has_center()) {
    center_ = new ::sploosh::Vector3d(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&wavenum_, &from.wavenum_,
    static_cast<size_t>(reinterpret_cast<char*>(&numexp_) -
    reinterpret_cast<char*>(&wavenum_)) + sizeof(numexp_));
  // @@protoc_insertion_point(copy_constructor:sploosh.FMMoments)
}

void FMMoments::SharedCtor() {
  _cached_size_ = 0;
  mfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numexp_) -
      reinterpret_cast<char*>(&center_)) + sizeof(numexp_));
}

FMMoments::~FMMoments() {
  // @@protoc_insertion_point(destructor:sploosh.FMMoments)
  SharedDtor();
}

void FMMoments::SharedDtor() {
  mfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void FMMoments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMMoments::descriptor() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FMMoments& FMMoments::default_instance() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsFMMoments();
  return *internal_default_instance();
}

FMMoments* FMMoments::New(::google::protobuf::Arena* arena) const {
  FMMoments* n = new FMMoments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FMMoments::Clear() {
// @@protoc_insertion_point(message_clear_start:sploosh.FMMoments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mfile_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&wavenum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numexp_) -
        reinterpret_cast<char*>(&wavenum_)) + sizeof(numexp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FMMoments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sploosh.FMMoments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 numExp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_numexp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double waveNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_wavenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wavenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sploosh.Vector3d center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mfile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mfile().data(), static_cast<int>(this->mfile().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sploosh.FMMoments.mfile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sploosh.FMMoments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sploosh.FMMoments)
  return false;
#undef DO_
}

void FMMoments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sploosh.FMMoments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 numExp = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numexp(), output);
  }

  // required double waveNum = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wavenum(), output);
  }

  // optional .sploosh.Vector3d center = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->center_, output);
  }

  // optional string mfile = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mfile().data(), static_cast<int>(this->mfile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sploosh.FMMoments.mfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mfile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sploosh.FMMoments)
}

::google::protobuf::uint8* FMMoments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sploosh.FMMoments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 numExp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numexp(), target);
  }

  // required double waveNum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wavenum(), target);
  }

  // optional .sploosh.Vector3d center = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->center_, deterministic, target);
  }

  // optional string mfile = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mfile().data(), static_cast<int>(this->mfile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sploosh.FMMoments.mfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mfile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sploosh.FMMoments)
  return target;
}

size_t FMMoments::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sploosh.FMMoments)
  size_t total_size = 0;

  if (has_wavenum()) {
    // required double waveNum = 2;
    total_size += 1 + 8;
  }

  if (has_numexp()) {
    // required uint32 numExp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numexp());
  }

  return total_size;
}
size_t FMMoments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sploosh.FMMoments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required double waveNum = 2;
    total_size += 1 + 8;

    // required uint32 numExp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numexp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string mfile = 4;
    if (has_mfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mfile());
    }

    // optional .sploosh.Vector3d center = 3;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->center_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMMoments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sploosh.FMMoments)
  GOOGLE_DCHECK_NE(&from, this);
  const FMMoments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FMMoments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sploosh.FMMoments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sploosh.FMMoments)
    MergeFrom(*source);
  }
}

void FMMoments::MergeFrom(const FMMoments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sploosh.FMMoments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mfile();
      mfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mfile_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_center()->::sploosh::Vector3d::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000004u) {
      wavenum_ = from.wavenum_;
    }
    if (cached_has_bits & 0x00000008u) {
      numexp_ = from.numexp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FMMoments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sploosh.FMMoments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMMoments::CopyFrom(const FMMoments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sploosh.FMMoments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMMoments::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void FMMoments::Swap(FMMoments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FMMoments::InternalSwap(FMMoments* other) {
  using std::swap;
  mfile_.Swap(&other->mfile_);
  swap(center_, other->center_);
  swap(wavenum_, other->wavenum_);
  swap(numexp_, other->numexp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FMMoments::GetMetadata() const {
  protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModalMoments::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModalMoments::kMomentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModalMoments::ModalMoments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsModalMoments();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sploosh.ModalMoments)
}
ModalMoments::ModalMoments(const ModalMoments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      moment_(from.moment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sploosh.ModalMoments)
}

void ModalMoments::SharedCtor() {
  _cached_size_ = 0;
}

ModalMoments::~ModalMoments() {
  // @@protoc_insertion_point(destructor:sploosh.ModalMoments)
  SharedDtor();
}

void ModalMoments::SharedDtor() {
}

void ModalMoments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModalMoments::descriptor() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModalMoments& ModalMoments::default_instance() {
  ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsModalMoments();
  return *internal_default_instance();
}

ModalMoments* ModalMoments::New(::google::protobuf::Arena* arena) const {
  ModalMoments* n = new ModalMoments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModalMoments::Clear() {
// @@protoc_insertion_point(message_clear_start:sploosh.ModalMoments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  moment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModalMoments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sploosh.ModalMoments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sploosh.FMMoments moment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_moment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sploosh.ModalMoments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sploosh.ModalMoments)
  return false;
#undef DO_
}

void ModalMoments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sploosh.ModalMoments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sploosh.FMMoments moment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moment(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sploosh.ModalMoments)
}

::google::protobuf::uint8* ModalMoments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sploosh.ModalMoments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sploosh.FMMoments moment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->moment(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sploosh.ModalMoments)
  return target;
}

size_t ModalMoments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sploosh.ModalMoments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sploosh.FMMoments moment = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->moment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->moment(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModalMoments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sploosh.ModalMoments)
  GOOGLE_DCHECK_NE(&from, this);
  const ModalMoments* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModalMoments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sploosh.ModalMoments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sploosh.ModalMoments)
    MergeFrom(*source);
  }
}

void ModalMoments::MergeFrom(const ModalMoments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sploosh.ModalMoments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  moment_.MergeFrom(from.moment_);
}

void ModalMoments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sploosh.ModalMoments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModalMoments::CopyFrom(const ModalMoments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sploosh.ModalMoments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModalMoments::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->moment())) return false;
  return true;
}

void ModalMoments::Swap(ModalMoments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModalMoments::InternalSwap(ModalMoments* other) {
  using std::swap;
  moment_.InternalSwap(&other->moment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModalMoments::GetMetadata() const {
  protobuf_src_2fprotobuf_2fsploosh_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fprotobuf_2fsploosh_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sploosh

// @@protoc_insertion_point(global_scope)
