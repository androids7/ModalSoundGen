// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/protobuf/sploosh.proto

#ifndef PROTOBUF_src_2fprotobuf_2fsploosh_2eproto__INCLUDED
#define PROTOBUF_src_2fprotobuf_2fsploosh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_src_2fprotobuf_2fsploosh_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVector3dImpl();
void InitDefaultsVector3d();
void InitDefaultsComplexdImpl();
void InitDefaultsComplexd();
void InitDefaultsFMMomentsImpl();
void InitDefaultsFMMoments();
void InitDefaultsModalMomentsImpl();
void InitDefaultsModalMoments();
inline void InitDefaults() {
  InitDefaultsVector3d();
  InitDefaultsComplexd();
  InitDefaultsFMMoments();
  InitDefaultsModalMoments();
}
}  // namespace protobuf_src_2fprotobuf_2fsploosh_2eproto
namespace sploosh {
class Complexd;
class ComplexdDefaultTypeInternal;
extern ComplexdDefaultTypeInternal _Complexd_default_instance_;
class FMMoments;
class FMMomentsDefaultTypeInternal;
extern FMMomentsDefaultTypeInternal _FMMoments_default_instance_;
class ModalMoments;
class ModalMomentsDefaultTypeInternal;
extern ModalMomentsDefaultTypeInternal _ModalMoments_default_instance_;
class Vector3d;
class Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
}  // namespace sploosh
namespace sploosh {

// ===================================================================

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sploosh.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vector3d* other);
  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1 [default = 0];
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2 [default = 0];
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3 [default = 0];
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:sploosh.Vector3d)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::protobuf_src_2fprotobuf_2fsploosh_2eproto::TableStruct;
  friend void ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsVector3dImpl();
};
// -------------------------------------------------------------------

class Complexd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sploosh.Complexd) */ {
 public:
  Complexd();
  virtual ~Complexd();

  Complexd(const Complexd& from);

  inline Complexd& operator=(const Complexd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Complexd(Complexd&& from) noexcept
    : Complexd() {
    *this = ::std::move(from);
  }

  inline Complexd& operator=(Complexd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Complexd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Complexd* internal_default_instance() {
    return reinterpret_cast<const Complexd*>(
               &_Complexd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Complexd* other);
  friend void swap(Complexd& a, Complexd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Complexd* New() const PROTOBUF_FINAL { return New(NULL); }

  Complexd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Complexd& from);
  void MergeFrom(const Complexd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Complexd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double real = 1 [default = 0];
  bool has_real() const;
  void clear_real();
  static const int kRealFieldNumber = 1;
  double real() const;
  void set_real(double value);

  // optional double imag = 2 [default = 0];
  bool has_imag() const;
  void clear_imag();
  static const int kImagFieldNumber = 2;
  double imag() const;
  void set_imag(double value);

  // @@protoc_insertion_point(class_scope:sploosh.Complexd)
 private:
  void set_has_real();
  void clear_has_real();
  void set_has_imag();
  void clear_has_imag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double real_;
  double imag_;
  friend struct ::protobuf_src_2fprotobuf_2fsploosh_2eproto::TableStruct;
  friend void ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsComplexdImpl();
};
// -------------------------------------------------------------------

class FMMoments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sploosh.FMMoments) */ {
 public:
  FMMoments();
  virtual ~FMMoments();

  FMMoments(const FMMoments& from);

  inline FMMoments& operator=(const FMMoments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FMMoments(FMMoments&& from) noexcept
    : FMMoments() {
    *this = ::std::move(from);
  }

  inline FMMoments& operator=(FMMoments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FMMoments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FMMoments* internal_default_instance() {
    return reinterpret_cast<const FMMoments*>(
               &_FMMoments_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FMMoments* other);
  friend void swap(FMMoments& a, FMMoments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FMMoments* New() const PROTOBUF_FINAL { return New(NULL); }

  FMMoments* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FMMoments& from);
  void MergeFrom(const FMMoments& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FMMoments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mfile = 4;
  bool has_mfile() const;
  void clear_mfile();
  static const int kMfileFieldNumber = 4;
  const ::std::string& mfile() const;
  void set_mfile(const ::std::string& value);
  #if LANG_CXX11
  void set_mfile(::std::string&& value);
  #endif
  void set_mfile(const char* value);
  void set_mfile(const char* value, size_t size);
  ::std::string* mutable_mfile();
  ::std::string* release_mfile();
  void set_allocated_mfile(::std::string* mfile);

  // optional .sploosh.Vector3d center = 3;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 3;
  const ::sploosh::Vector3d& center() const;
  ::sploosh::Vector3d* release_center();
  ::sploosh::Vector3d* mutable_center();
  void set_allocated_center(::sploosh::Vector3d* center);

  // required double waveNum = 2;
  bool has_wavenum() const;
  void clear_wavenum();
  static const int kWaveNumFieldNumber = 2;
  double wavenum() const;
  void set_wavenum(double value);

  // required uint32 numExp = 1;
  bool has_numexp() const;
  void clear_numexp();
  static const int kNumExpFieldNumber = 1;
  ::google::protobuf::uint32 numexp() const;
  void set_numexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sploosh.FMMoments)
 private:
  void set_has_numexp();
  void clear_has_numexp();
  void set_has_wavenum();
  void clear_has_wavenum();
  void set_has_center();
  void clear_has_center();
  void set_has_mfile();
  void clear_has_mfile();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mfile_;
  ::sploosh::Vector3d* center_;
  double wavenum_;
  ::google::protobuf::uint32 numexp_;
  friend struct ::protobuf_src_2fprotobuf_2fsploosh_2eproto::TableStruct;
  friend void ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsFMMomentsImpl();
};
// -------------------------------------------------------------------

class ModalMoments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sploosh.ModalMoments) */ {
 public:
  ModalMoments();
  virtual ~ModalMoments();

  ModalMoments(const ModalMoments& from);

  inline ModalMoments& operator=(const ModalMoments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModalMoments(ModalMoments&& from) noexcept
    : ModalMoments() {
    *this = ::std::move(from);
  }

  inline ModalMoments& operator=(ModalMoments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModalMoments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModalMoments* internal_default_instance() {
    return reinterpret_cast<const ModalMoments*>(
               &_ModalMoments_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ModalMoments* other);
  friend void swap(ModalMoments& a, ModalMoments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModalMoments* New() const PROTOBUF_FINAL { return New(NULL); }

  ModalMoments* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModalMoments& from);
  void MergeFrom(const ModalMoments& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModalMoments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sploosh.FMMoments moment = 1;
  int moment_size() const;
  void clear_moment();
  static const int kMomentFieldNumber = 1;
  const ::sploosh::FMMoments& moment(int index) const;
  ::sploosh::FMMoments* mutable_moment(int index);
  ::sploosh::FMMoments* add_moment();
  ::google::protobuf::RepeatedPtrField< ::sploosh::FMMoments >*
      mutable_moment();
  const ::google::protobuf::RepeatedPtrField< ::sploosh::FMMoments >&
      moment() const;

  // @@protoc_insertion_point(class_scope:sploosh.ModalMoments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::sploosh::FMMoments > moment_;
  friend struct ::protobuf_src_2fprotobuf_2fsploosh_2eproto::TableStruct;
  friend void ::protobuf_src_2fprotobuf_2fsploosh_2eproto::InitDefaultsModalMomentsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3d

// optional double x = 1 [default = 0];
inline bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:sploosh.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:sploosh.Vector3d.x)
}

// optional double y = 2 [default = 0];
inline bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:sploosh.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:sploosh.Vector3d.y)
}

// optional double z = 3 [default = 0];
inline bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:sploosh.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:sploosh.Vector3d.z)
}

// -------------------------------------------------------------------

// Complexd

// optional double real = 1 [default = 0];
inline bool Complexd::has_real() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Complexd::set_has_real() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Complexd::clear_has_real() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Complexd::clear_real() {
  real_ = 0;
  clear_has_real();
}
inline double Complexd::real() const {
  // @@protoc_insertion_point(field_get:sploosh.Complexd.real)
  return real_;
}
inline void Complexd::set_real(double value) {
  set_has_real();
  real_ = value;
  // @@protoc_insertion_point(field_set:sploosh.Complexd.real)
}

// optional double imag = 2 [default = 0];
inline bool Complexd::has_imag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Complexd::set_has_imag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Complexd::clear_has_imag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Complexd::clear_imag() {
  imag_ = 0;
  clear_has_imag();
}
inline double Complexd::imag() const {
  // @@protoc_insertion_point(field_get:sploosh.Complexd.imag)
  return imag_;
}
inline void Complexd::set_imag(double value) {
  set_has_imag();
  imag_ = value;
  // @@protoc_insertion_point(field_set:sploosh.Complexd.imag)
}

// -------------------------------------------------------------------

// FMMoments

// required uint32 numExp = 1;
inline bool FMMoments::has_numexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FMMoments::set_has_numexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FMMoments::clear_has_numexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FMMoments::clear_numexp() {
  numexp_ = 0u;
  clear_has_numexp();
}
inline ::google::protobuf::uint32 FMMoments::numexp() const {
  // @@protoc_insertion_point(field_get:sploosh.FMMoments.numExp)
  return numexp_;
}
inline void FMMoments::set_numexp(::google::protobuf::uint32 value) {
  set_has_numexp();
  numexp_ = value;
  // @@protoc_insertion_point(field_set:sploosh.FMMoments.numExp)
}

// required double waveNum = 2;
inline bool FMMoments::has_wavenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FMMoments::set_has_wavenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FMMoments::clear_has_wavenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FMMoments::clear_wavenum() {
  wavenum_ = 0;
  clear_has_wavenum();
}
inline double FMMoments::wavenum() const {
  // @@protoc_insertion_point(field_get:sploosh.FMMoments.waveNum)
  return wavenum_;
}
inline void FMMoments::set_wavenum(double value) {
  set_has_wavenum();
  wavenum_ = value;
  // @@protoc_insertion_point(field_set:sploosh.FMMoments.waveNum)
}

// optional .sploosh.Vector3d center = 3;
inline bool FMMoments::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FMMoments::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FMMoments::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FMMoments::clear_center() {
  if (center_ != NULL) center_->Clear();
  clear_has_center();
}
inline const ::sploosh::Vector3d& FMMoments::center() const {
  const ::sploosh::Vector3d* p = center_;
  // @@protoc_insertion_point(field_get:sploosh.FMMoments.center)
  return p != NULL ? *p : *reinterpret_cast<const ::sploosh::Vector3d*>(
      &::sploosh::_Vector3d_default_instance_);
}
inline ::sploosh::Vector3d* FMMoments::release_center() {
  // @@protoc_insertion_point(field_release:sploosh.FMMoments.center)
  clear_has_center();
  ::sploosh::Vector3d* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::sploosh::Vector3d* FMMoments::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    center_ = new ::sploosh::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:sploosh.FMMoments.center)
  return center_;
}
inline void FMMoments::set_allocated_center(::sploosh::Vector3d* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_;
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    set_has_center();
  } else {
    clear_has_center();
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:sploosh.FMMoments.center)
}

// optional string mfile = 4;
inline bool FMMoments::has_mfile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FMMoments::set_has_mfile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FMMoments::clear_has_mfile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FMMoments::clear_mfile() {
  mfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mfile();
}
inline const ::std::string& FMMoments::mfile() const {
  // @@protoc_insertion_point(field_get:sploosh.FMMoments.mfile)
  return mfile_.GetNoArena();
}
inline void FMMoments::set_mfile(const ::std::string& value) {
  set_has_mfile();
  mfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sploosh.FMMoments.mfile)
}
#if LANG_CXX11
inline void FMMoments::set_mfile(::std::string&& value) {
  set_has_mfile();
  mfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sploosh.FMMoments.mfile)
}
#endif
inline void FMMoments::set_mfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mfile();
  mfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sploosh.FMMoments.mfile)
}
inline void FMMoments::set_mfile(const char* value, size_t size) {
  set_has_mfile();
  mfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sploosh.FMMoments.mfile)
}
inline ::std::string* FMMoments::mutable_mfile() {
  set_has_mfile();
  // @@protoc_insertion_point(field_mutable:sploosh.FMMoments.mfile)
  return mfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FMMoments::release_mfile() {
  // @@protoc_insertion_point(field_release:sploosh.FMMoments.mfile)
  clear_has_mfile();
  return mfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FMMoments::set_allocated_mfile(::std::string* mfile) {
  if (mfile != NULL) {
    set_has_mfile();
  } else {
    clear_has_mfile();
  }
  mfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mfile);
  // @@protoc_insertion_point(field_set_allocated:sploosh.FMMoments.mfile)
}

// -------------------------------------------------------------------

// ModalMoments

// repeated .sploosh.FMMoments moment = 1;
inline int ModalMoments::moment_size() const {
  return moment_.size();
}
inline void ModalMoments::clear_moment() {
  moment_.Clear();
}
inline const ::sploosh::FMMoments& ModalMoments::moment(int index) const {
  // @@protoc_insertion_point(field_get:sploosh.ModalMoments.moment)
  return moment_.Get(index);
}
inline ::sploosh::FMMoments* ModalMoments::mutable_moment(int index) {
  // @@protoc_insertion_point(field_mutable:sploosh.ModalMoments.moment)
  return moment_.Mutable(index);
}
inline ::sploosh::FMMoments* ModalMoments::add_moment() {
  // @@protoc_insertion_point(field_add:sploosh.ModalMoments.moment)
  return moment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sploosh::FMMoments >*
ModalMoments::mutable_moment() {
  // @@protoc_insertion_point(field_mutable_list:sploosh.ModalMoments.moment)
  return &moment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sploosh::FMMoments >&
ModalMoments::moment() const {
  // @@protoc_insertion_point(field_list:sploosh.ModalMoments.moment)
  return moment_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sploosh

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fprotobuf_2fsploosh_2eproto__INCLUDED
